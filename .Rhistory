table(submission$label_score)
submission$label_score = ifelse(submission$score>0,1,0)
table(submission$label_score)
q_actions_bis<-"Select contact_id, count(campaign_id) as targetedlstyear
from charity2.actions
WHERE period_id = 1
group by contact_id"
actions <- sqlQuery(db,q_actions_bis)
df = merge(temp3,contacts, by.x = 'contact_id',by.y = 'id')
dfbis = merge(df,target,by = 'contact_id',all.x=T)
dfbis[is.na(dfbis$target),c('target')] = 0
dfbis = merge(dfbis,actions,by='contact_id',all.x=T)
dfbis[is.na(dfbis$targetedlst2year),c('targetedlst2year')] = 0
data_train_target = dfbis[dfbis$tag_int_1==0,]
data_topredict_target = dfbis[dfbis$tag_int_1==1,]
df = merge(temp3,contacts, by.x = 'contact_id',by.y = 'id')
dfbis = merge(df,target,by = 'contact_id',all.x=T)
dfbis[is.na(dfbis$target),c('target')] = 0
dfbis = merge(dfbis,actions,by='contact_id',all.x=T)
dfbis[is.na(dfbis$targetedlst2year),c('targetedlstyear')] = 0
data_train_target = dfbis[dfbis$tag_int_1==0,]
data_topredict_target = dfbis[dfbis$tag_int_1==1,]
data_train_target$label = as.factor(data_train_target$label)
summary(data_train_target)
df = merge(temp3,contacts, by.x = 'contact_id',by.y = 'id')
dfbis = merge(df,target,by = 'contact_id',all.x=T)
dfbis[is.na(dfbis$target),c('target')] = 0
dfbis = merge(dfbis,actions,by='contact_id',all.x=T)
dfbis[is.na(dfbis$targetedlstyear),c('targetedlstyear')] = 0
data_train_target = dfbis[dfbis$tag_int_1==0,]
data_topredict_target = dfbis[dfbis$tag_int_1==1,]
data_train_target$label = as.factor(data_train_target$label)
summary(data_train_target)
summary(data_topredict_target)
indice_tr = sample(1:dim(data_train_target)[1],as.integer(0.7*dim(data_train_target)[1]),replace=FALSE)
train = data_train_target[indice_tr,]
valid = data_train_target[-indice_tr,]
prob.model = multinom(formula = label ~ recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear,
data = train)
lm = lm(log(1+target)~recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear,data=train)
pred = as.data.frame(exp(predict(lm,newdata = valid))-1)
colnames(pred) = c('amount')
prob.model = glm(formula = label ~ recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear,
data = train)
prob.model = glm(formula = label ~ recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear, family='binomial',
data = train)
lm = lm(log(1+target)~recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear,data=train)
pred = as.data.frame(exp(predict(lm,newdata = valid))-1)
colnames(pred) = c('amount')
pred$prob =  predict(object = prob.model, newdata = valid, type = "probs")
pred$prob =  predict(object = prob.model, newdata = valid, type = "response")
head(pred)
summary(pred)
pred$score = pred$amount*pred$prob
pred$label = ifelse(pred$amount>5,1,0)
mat_conf = table(pred$label,valid$label)
mat_conf
pred$label = ifelse(pred$score>5,1,0)
mat_conf = table(pred$label,valid$label)
mat_conf
pred$label = ifelse(pred$score>0,1,0)
mat_conf = table(pred$label,valid$label)
mat_conf
pred$label = ifelse(pred$score>1,1,0)
mat_conf = table(pred$label,valid$label)
mat_conf
prob.model.final = glm(formula = label ~ recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear, family='binomial',
data = data_train_target)
amount.model.final = lm(log(1+target)~recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlst2year,data=data_train_target)
amount.model.final = lm(log(1+target)~recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear,data=data_train_target)
submission = as.data.frame(exp(predict(amount.model.final,newdata = data_topredict_target))-1)
colnames(submission) = c('amountpredicted')
submission$probpredicted = predict(prob.model.final, newdata = data_topredict_target[,c('recency','Sex','nb_pr1','nb_pr2','nb_pr3','targetedlst2year')], type = "probs")
submission$score = submission$amountpredicted*submission$probpredicted
submission$label = ifelse(submission$score>5,1,0)
submission = as.data.frame(exp(predict(amount.model.final,newdata = data_topredict_target))-1)
colnames(submission) = c('amountpredicted')
submission$probpredicted = predict(prob.model.final, newdata = data_topredict_target, type = "response")
submission$score = submission$amountpredicted*submission$probpredicted
submission$label = ifelse(submission$score>5,1,0)
table(submission$label)
submission$label_score = ifelse(submission$score>0,1,0)
table(submission$label_score)
submission[1:50,]
submission[50:100,]
write.table(submission[,c('id','label')],'Cours3A/MSc/MarketingAnalytics/hw2/submission2.txt',col.names = FALSE,row.names = FALSE,sep='\t')
submission$id = data_topredict_target$contact_id
write.table(submission[,c('id','label')],'Cours3A/MSc/MarketingAnalytics/hw2/submission2.txt',col.names = FALSE,row.names = FALSE,sep='\t')
submission[1:50,]
accuracy_reglog_target = c()
FP_reglog_target = c()
FN_reglog_target = c()
score_reglog = c()
for (i in c(1:10))
{
indice_tr = sample(1:dim(data_train_target)[1],as.integer(0.7*dim(data_train_target)[1]),replace=FALSE)
train = data_train_target[indice_tr,]
valid = data_train_target[-indice_tr,]
prob.model = glm(formula = label ~ recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear, family='binomial',
data = train)
lm = lm(log(1+target)~recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear,data=train)
pred = as.data.frame(exp(predict(lm,newdata = valid))-1)
colnames(pred) = c('amount')
pred$prob =  predict(object = prob.model, newdata = valid, type = "response")
pred$score = pred$amount*pred$prob
pred$label = ifelse(pred$score>5,1,0)
mat_conf = table(pred$label,valid$label)
accuracy = (mat_conf[1,1]+mat_conf[2,2])/sum(mat_conf)
FP = (mat_conf[2,1]/(mat_conf[2,1]+mat_conf[2,2]))
FN = (mat_conf[1,2]/(mat_conf[1,2]+mat_conf[2,2]))
score = score_euros(pred$label,valid[,c('label','target')])
accuracy_reglog_target = c(accuracy_reglog_target,accuracy)
FP_reglog_target = c(FP_reglog_target,FP)
FN_reglog_target = c(FN_reglog_target,FN)
score_reglog = c(score_reglog,score)
}
score_reglog
accuracy_reglog_target
FP_reglog_target
FN
FN_reglog_target
prob.model.final = glm(formula = label ~ recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear, family='binomial',
data = data_train_target)
amount.model.final = lm(log(1+target)~recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear,data=data_train_target)
submission = as.data.frame(exp(predict(amount.model.final,newdata = data_topredict_target))-1)
colnames(submission) = c('amountpredicted')
submission$probpredicted = predict(prob.model.final, newdata = data_topredict_target, type = "response")
submission$score = submission$amountpredicted*submission$probpredicted
submission$label = ifelse(submission$score>4,1,0)
submission$id = data_topredict_target$contact_id
table(submission$label)
submission$label = ifelse(submission$score>3.5,1,0)
table(submission$label)
submission$label = ifelse(submission$score>3,1,0)
table(submission$label)
table(data_train_target$label)
count = c()
for (threshold in c(0,5,0.1))
{
sub$label = ifelse(submission$score>threshold,1,0)
count = c(count,table(sub$label)[1])
}
count = c()
for (threshold in c(0,5,0.1))
{
sub$label = ifelse(sub$score>threshold,1,0)
count = c(count,table(sub$label)[1])
}
head(sub)
count = c()
for (threshold in c(0,5,0.1))
{
submi$label = ifelse(submi$score>threshold,1,0)
count = c(count,table(submi$label)[1])
}
submi = submission
for (threshold in c(0,5,0.1))
{
submi$label = ifelse(submi$score>threshold,1,0)
count = c(count,table(submi$label)[1])
}
count
c(0:5,0.1)
seq(0,5,50)
seq(0,5,0.01)
seq(0,5,0.1)
count = c()
for (threshold in seq(0,5,0.1))
{
submi$label = ifelse(submi$score>threshold,1,0)
count = c(count,table(submi$label)[1])
}
count
count = c()
for (threshold in seq(0,5,0.1))
{
submi$label = ifelse(submi$score>threshold,1,0)
count = c(count,table(submi$label)[2])
}
as.data.frame(seq(0,5,0.1),count)
b = seq(0,5,0.1)
as.data.frame(b,count)
as.data.frame(b,as.vector(count))
count
as.vector(seq(0,5,0.1))
as.data.frame(as.vector(b),as.vector(count))
submi = submission
count = c()
for (threshold in seq(0,5,0.1))
{
submi$label = ifelse(submi$score>threshold,1,0)
count = c(count,as.numeric(table(submi$label)[2]))
}
as.data.frame(as.vector(b),count)
as.data.frame(seuil=as.vector(b),count)
b
submission = as.data.frame(exp(predict(amount.model.final,newdata = data_topredict_target))-1)
colnames(submission) = c('amountpredicted')
submission$probpredicted = predict(prob.model.final, newdata = data_topredict_target, type = "response")
submission$score = submission$amountpredicted*submission$probpredicted
submission$label = ifelse(submission$score>0.1,1,0)
submission$id = data_topredict_target$contact_id
table(submission$label)
submission[1:80,]
write.table(submission[,c('id','label')],'Cours3A/MSc/MarketingAnalytics/hw2/submission3.txt',col.names = FALSE,row.names = FALSE,sep='\t')
table(submission$label)
data_topredict_target[data_topredict_target$contact_id=='1007186']
data_topredict_target[data_topredict_target$contact_id=='1007186',]
data_topredict_target[data_topredict_target$contact_id=='1006675',]
submission$label = ifelse(submission$amount>5,1,0)
table(submission$label)
submission$label = ifelse(submission$amount>0.1,1,0)
table(submission$label)
submission$label = ifelse(submission$amount>4,1,0)
table(submission$label)
db = odbcConnect("MySQL", uid="root", pwd="")
sqlQuery(db, "USE charity")
query = "SELECT a.ContactId,
DATEDIFF(20121101, MAX(a.ActDate)) / 365 AS 'recency',
COUNT(a.Amount) AS 'frequency',
AVG(a.Amount) AS 'avgamount',
MAX(a.Amount) AS 'maxamount',
IF(c.counter IS NULL, 0, 1) AS 'loyal',
c.targetamount AS 'targetamount'
FROM acts a
LEFT JOIN (SELECT ContactId, COUNT(Amount) AS counter, AVG(Amount) AS targetamount
FROM Acts
WHERE (ActDate >= 20121101) AND
(ActDate <  20131101) AND
(ActType = 'DO')
GROUP BY ContactId) AS c
ON c.ContactId = a.ContactId
WHERE (ActType = 'DO') AND (ActDate < 20121101)
GROUP BY 1"
data = sqlQuery(db, query)
db = odbcConnect("MySQL", uid="root")
sqlQuery(db, "USE charity")
data = sqlQuery(db, query)
data
accuracy_reglog_target = c()
FP_reglog_target = c()
FN_reglog_target = c()
score_reglog = c()
for (i in c(1:10))
{
indice_tr = sample(1:dim(data_train_target)[1],as.integer(0.7*dim(data_train_target)[1]),replace=FALSE)
train = data_train_target[indice_tr,]
valid = data_train_target[-indice_tr,]
# model to have a probability of donation for period 0
prob.model = glm(formula = label ~ recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear, family='binomial',
data = train)
# model to have an amount of donation for period 0, we predict log(1+target), for case when target = 0 and to have positive values
lm = lm(log(1+target)~recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear,data=train)
pred = as.data.frame(exp(predict(lm,newdata = valid))-1)
colnames(pred) = c('amount')
pred$prob =  predict(object = prob.model, newdata = valid, type = "response")
pred$score = pred$amount*pred$prob
pred$label = ifelse(pred$score>3,1,0)
mat_conf = table(pred$label,valid$label)
accuracy = (mat_conf[1,1]+mat_conf[2,2])/sum(mat_conf)
FP = (mat_conf[2,1]/(mat_conf[2,1]+mat_conf[2,2]))
FN = (mat_conf[1,2]/(mat_conf[1,2]+mat_conf[2,2]))
score = score_euros(pred$label,valid[,c('label','target')])
accuracy_reglog_target = c(accuracy_reglog_target,accuracy)
FP_reglog_target = c(FP_reglog_target,FP)
FN_reglog_target = c(FN_reglog_target,FN)
score_reglog = c(score_reglog,score)
}
score_reglog
accuracy_reglog_target
FP_reglog_target
FN_reglog_target
accuracy_reglog_target = c()
FP_reglog_target = c()
FN_reglog_target = c()
score_reglog = c()
for (i in c(1:10))
{
indice_tr = sample(1:dim(data_train_target)[1],as.integer(0.7*dim(data_train_target)[1]),replace=FALSE)
train = data_train_target[indice_tr,]
valid = data_train_target[-indice_tr,]
# model to have a probability of donation for period 0
prob.model = glm(formula = label ~ recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear, family='binomial',
data = train)
# model to have an amount of donation for period 0, we predict log(1+target), for case when target = 0 and to have positive values
lm = lm(log(1+target)~recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear,data=train)
pred = as.data.frame(exp(predict(lm,newdata = valid))-1)
colnames(pred) = c('amount')
pred$prob =  predict(object = prob.model, newdata = valid, type = "response")
pred$score = pred$amount*pred$prob
pred$label = ifelse(pred$score>0.1,1,0)
mat_conf = table(pred$label,valid$label)
accuracy = (mat_conf[1,1]+mat_conf[2,2])/sum(mat_conf)
FP = (mat_conf[2,1]/(mat_conf[2,1]+mat_conf[2,2]))
FN = (mat_conf[1,2]/(mat_conf[1,2]+mat_conf[2,2]))
score = score_euros(pred$label,valid[,c('label','target')])
accuracy_reglog_target = c(accuracy_reglog_target,accuracy)
FP_reglog_target = c(FP_reglog_target,FP)
FN_reglog_target = c(FN_reglog_target,FN)
score_reglog = c(score_reglog,score)
}
score_reglog
FN_reglog_target
FP_reglog_target
accuracy
library(RODBC)
db = odbcConnect("MySQL", uid="root")
q_acts <- "SELECT contact_id,
DATEDIFF(20160118, LEAST(MAX(act_date),20160118))/365 as recency,
case when MAX(act_date) > 20160118
then 1
else 0
end as label
FROM charity2.acts
GROUP BY 1"
target <- "SELECT contact_id, SUM(amount) AS target
FROM charity2.acts
WHERE period_id = 0
GROUP BY 1"
# amount donated and number of donations for period 1
period1 <-    "SELECT contact_id, SUM(amount) AS sum_pr1, COUNT(amount) AS nb_pr1
FROM charity2.acts
WHERE period_id = 1
GROUP BY 1"
# amount donated and number of donations for period 2
period2 <- "SELECT contact_id, SUM(amount) AS sum_pr2, COUNT(amount) AS nb_pr2
FROM charity2.acts
WHERE period_id = 2
GROUP BY 1"
# amount donated and number of donations for period 3
period3 <- "SELECT contact_id, SUM(amount) AS sum_pr3, COUNT(amount) AS nb_pr3
FROM charity2.acts
WHERE period_id = 3
GROUP BY 1"
# Number of times each person has been targeted by a campaign in period 1
q_actions<-"Select contact_id, count(campaign_id) as targetedlstyear
from charity2.actions
WHERE period_id = 1
group by contact_id"
# Get sex and tag_int_1 values from contacts
q_contacts <-"SELECT id,
prefix_id,
CASE WHEN prefix_id IN ('MME','MLLE','MMME','ME')
THEN 0
ELSE 1
END AS Sex,
zip_code,
tag_int_1
FROM charity2.contacts"
target = sqlQuery(db,target)
period1 = sqlQuery(db,period1)
period2 = sqlQuery(db,period2)
period3 = sqlQuery(db,period3)
acts = sqlQuery(db,q_acts)
actions <- sqlQuery(db,q_actions)
contacts <- sqlQuery(db,q_contacts)
# merge data and assign 0 when no value for period 1 and period 2 period 3
temp1 = merge(acts,period1,by='contact_id',all.x = T)
temp1[is.na(temp1)] = 0
temp2 = merge(temp1,period2,by='contact_id',all.x = T)
temp2[is.na(temp2)] = 0
temp3 = merge(temp2,period3,by='contact_id',all.x = T)
temp3[is.na(temp3)] = 0
df = merge(temp3,contacts, by.x = 'contact_id',by.y = 'id')
dfbis = merge(df,target,by = 'contact_id',all.x=T)
dfbis[is.na(dfbis$target),c('target')] = 0
dfbis = merge(dfbis,actions,by='contact_id',all.x=T)
dfbis[is.na(dfbis$targetedlstyear),c('targetedlstyear')] = 0
## TRAINING SET with data where tag_int_1 = 0 ##
data_train_target = dfbis[dfbis$tag_int_1==0,]
data_topredict_target = dfbis[dfbis$tag_int_1==1,]
data_train_target$label = as.factor(data_train_target$label)
score_euros = function(pred_label,true){
cost = table(pred_label)[1]*5
gain = sum(true[pred$label==1,'target'])
return(gain-cost)
}
accuracy_reglog_target = c()
FP_reglog_target = c()
FN_reglog_target = c()
score_reglog = c()
for (i in c(1:10))
{
indice_tr = sample(1:dim(data_train_target)[1],as.integer(0.7*dim(data_train_target)[1]),replace=FALSE)
train = data_train_target[indice_tr,]
valid = data_train_target[-indice_tr,]
# model to have a probability of donation for period 0
prob.model = glm(formula = label ~ recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear, family='binomial',
data = train)
# model to have an amount of donation for period 0, we predict log(1+target), for case when target = 0 and to have positive values
lm = lm(log(1+target)~recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear,data=train)
pred = as.data.frame(exp(predict(lm,newdata = valid))-1)
colnames(pred) = c('amount')
pred$prob =  predict(object = prob.model, newdata = valid, type = "response")
pred$score = pred$amount*pred$prob
pred$label = ifelse(pred$score>0.1,1,0)
mat_conf = table(pred$label,valid$label)
accuracy = (mat_conf[1,1]+mat_conf[2,2])/sum(mat_conf)
FP = (mat_conf[2,1]/(mat_conf[2,1]+mat_conf[2,2]))
FN = (mat_conf[1,2]/(mat_conf[1,2]+mat_conf[2,2]))
score = score_euros(pred$label,valid[,c('label','target')])
accuracy_reglog_target = c(accuracy_reglog_target,accuracy)
FP_reglog_target = c(FP_reglog_target,FP)
FN_reglog_target = c(FN_reglog_target,FN)
score_reglog = c(score_reglog,score)
}
score_reglog
accuracy_reglog_target
FP_reglog_target
FN_reglog_target
prob.model.final = glm(formula = label ~ recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear, family='binomial',
data = data_train_target)
amount.model.final = lm(log(1+target)~recency+Sex+sum_pr1+nb_pr1+sum_pr2+nb_pr2+sum_pr3+nb_pr3+targetedlstyear,data=data_train_target)
submission = as.data.frame(exp(predict(amount.model.final,newdata = data_topredict_target))-1)
colnames(submission) = c('amountpredicted')
submission$probpredicted = predict(prob.model.final, newdata = data_topredict_target, type = "response")
submission$score = submission$amountpredicted*submission$probpredicted
submission$label = ifelse(submission$score>0.1,1,0)
submission$id = data_topredict_target$contact_id
table(submission$score)
table(submission$label)
setwd('Cours3A/MSc/MarketingAnalytics/hw3')
library(ggplot2)
library(reshape2)
contacts <- read.csv('data/charity2_contacts.csv',sep=';')
contacts$id <- NULL
contacts$prefix_id <- NULL
contacts$birth_date <- NULL
contacts$age <- NULL
contacts$first_name_clean <- NULL
Election_2012_with_INSEE <- read.csv("data/Election_2012_with_INSEE_Round1.csv",sep=',')
Election <- Election_2012_with_INSEE[,c("Code.INSEE","Code.du.département","Libellé.du.département","Code.de.la.commune","Libellé.de.la.commune", "Inscrits", "Exprimés", "Votants", "Blancs.et.nuls", "Abstentions")]
Election["JOLY"] <- Election_2012_with_INSEE[,22]
Election["LE PEN"] <- Election_2012_with_INSEE[,28]
Election["SARKOZY"] <- Election_2012_with_INSEE[,34]
Election["MÉLENCHON"] <- Election_2012_with_INSEE[,40]
Election["POUTOU"] <- Election_2012_with_INSEE[,46]
Election["ARTHAUD"] <- Election_2012_with_INSEE[,52]
Election["CHEMINADE"] <- Election_2012_with_INSEE[,58]
Election["BAYROU"] <- Election_2012_with_INSEE[,64]
Election["DUPONT-AIGNAN"] <- Election_2012_with_INSEE[,70]
Election["HOLLANDE"] <- Election_2012_with_INSEE[,76]
results <- c(sum(Election["Blancs.et.nuls"]),sum(Election["Abstentions"]), sum(Election["JOLY"]), sum(Election["LE PEN"]), sum(Election["SARKOZY"]), sum(Election["MÉLENCHON"]), sum(Election["POUTOU"]), sum(Election["ARTHAUD"]), sum(Election["CHEMINADE"]), sum(Election["BAYROU"]), sum(Election["DUPONT-AIGNAN"]), sum(Election["HOLLANDE"]))
counts <- cbind(colnames(Election[,9:20]),results)
Ydonné = t(Election[,c("Blancs.et.nuls","Abstentions","JOLY","LE PEN","SARKOZY","MÉLENCHON","POUTOU","ARTHAUD","CHEMINADE","BAYROU","DUPONT-AIGNAN","HOLLANDE")])
mle_Ydonné <- function(w0){
w <- c(w0[1],0,w0[2:11])
# Facteur
fact <- results%*%exp(w)
# Creation BDD modifée avec poids
Elections_points <- matrix(nrow = nrow(Election), ncol = 0)
for(i in 1:12){
col <- Election[,i+8]*exp(w[i])/fact
Elections_points = cbind(Elections_points, col)
}
Elections_points <- cbind(Election["Code.INSEE"],Elections_points)
# L creation
L <- rowSums(Elections_points[,c(2:13)])
logL <- log(L)*Election_2012_with_INSEE[,"Pop.charity.per.code.postal"]
Elections_points <- cbind(Elections_points, L, logL)
colnames(Elections_points)[14:15] <- c("L","logL")
logLrouge <- sum(logL)
return(-logLrouge)
}
winit0 <- rep(1,11)
optim_weights = optim(winit0, mle_Ydonné)
weights = optim_weights$par
weights = c(weights[1],0,weights[2:11])
Elections_points <- matrix(nrow = nrow(Election), ncol = 0)
for(i in 1:12){
col <- Election[,i+8]*exp(weights[i])/fact
Elections_points = cbind(Elections_points, col)
}
Elections_points <- cbind(Election["Code.INSEE"],Elections_points)
weightsNames <- cbind(c("Blancs et nuls","Abstentions","JOLY","LE PEN","SARKOZY","MÉLENCHON","POUTOU","ARTHAUD","CHEMINADE","BAYROU","DUPONT-AIGNAN","HOLLANDE"), weights)
prop <- exp(weights)/sum(exp(weights))
weightsNames <- cbind(weightsNames, prop)
data_weights <- as.data.frame(weightsNames)
weights <- as.numeric(as.vector(data_weights$weights))
weights_tot = apply(exp(weights)*Election[,c(9:20)],1,sum)
weights_j = exp(weights)*Election[,c(9:20)]
prob = weights_j/weights_tot
Res2 <- cbind(Election$Code.INSEE,Election$Exprimés*prob)
add_0toinsee <- function(code)
{
if (length(unlist(strsplit(code,''))) == 4){
return(paste('0',code,sep=''))
}else {
return(code)
}
}
insee <- as.character(Res2[,1])
transformed_insee <- as.vector(sapply(insee,add_0toinsee))
Res2[,1] <- transformed_insee
contacts_votes_bis <- merge(contacts, Res2[,c('Election$Code.INSEE',
'Blancs.et.nuls','Abstentions',
'JOLY','LE PEN','SARKOZY','MÉLENCHON','POUTOU','ARTHAUD','CHEMINADE',
'BAYROU','DUPONT-AIGNAN','HOLLANDE')],by.x='code_geo',by.y='Election$Code.INSEE')
votes = cbind(as.character(contacts_votes_bis$code_geo),colnames(contacts_votes_bis[,c(3:14)])[apply(contacts_votes_bis[,c(3:14)],1,which.max)])
nb_abs = as.numeric(table(votes[,2])[1])
proportion_with_abs = table(votes[,2])/dim(votes)[1]
proportion_without_abs = (table(votes[,2])/(dim(votes)[1]-nb_abs))[-1]
data = data.frame(rbind(c('True',28.63,27.18,17.9,11.1,9.13,2.31,1.79,0.56,0.25,1.52,20.52),
c('Estimated MLE',18.85,11.15,7.96,17.84,11.96,5.94,7.62,3.09,0.15,7.80,8.03)))
colnames(data) = c('model','Hollande','Sarkozy','Le Pen','Melenchon','Bayrou','Joly','Dupont-Aignan','Arthaud','Cheminade','Blank','Abs')
melt_data <-melt(data,id.vars="model")
melt_data$value <- as.numeric(melt_data$value)
bar = ggplot(melt_data,aes(x=variable,y=value,fill=model))+
geom_bar(stat="identity",position="dodge")+
geom_text(aes(label=value), position=position_dodge(width=0.9), vjust=-0.25)+
xlab("Candidates")+ylab("Percentage of votes") + labs(title='Percentages of votes for candidates Targeted Population with MLE')
plot(bar)
